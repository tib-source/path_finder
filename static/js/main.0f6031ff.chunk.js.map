{"version":3,"sources":["components/Board.js","components/PathFinder.js","components/App.js","index.js"],"names":["Board","HTML_BOARD_ARRAY","mock","className","map","row","rowIdx","col","colIdx","PathFinder","M_ROWS","M_COLS","delay","ms","Promise","resolve","setTimeout","this","BOARD_ARRAY","createBoard","previousNode","isWall","MaxRows","MaxCols","Column","htmlColumn","node","createNode","push","id","forEach","elem","document","querySelector","key","classList","direction","vertical","e","neighbours","directions","neighbour","getNeighbourNode","getNeighbours","i","curr","getElementById","add","startNode","endNode","split","substring","htmlCur","frontier","visited","cameFrom","found","current","shift","newNode","highlightNeighbours","findReturnPath","includes","length","currentNode","path","App","useState","counter","update","setupdate","setStartNode","setEndNode","useEffect","mockTest","breadthFirstSearch","handleInput","addEventListener","handler","start","parseInt","removeEventListener","end","onClick","resetBoard","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0f6031ff.chunk.js","sourcesContent":["// import Square from \"./Square\"\r\nimport { useEffect } from \"react\";\r\nconst Board = ({ HTML_BOARD_ARRAY, mock }) => {\r\n  const getRowElement = (rowIdx) => {\r\n    const rows = document.querySelectorAll(\".row\");\r\n    return rows[rowIdx];\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"grid\">\r\n        {HTML_BOARD_ARRAY.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx} className=\"row\">\r\n              {row.map((col, colIdx) => col)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","export default class PathFinder {\r\n  constructor(M_ROWS, M_COLS) {\r\n    this.M_COLS = M_COLS;\r\n    this.M_ROWS = M_ROWS;\r\n    this.BOARD_ARRAY = [];\r\n    this.HTML_BOARD_ARRAY = [];\r\n    this.createBoard(this.M_ROWS, this.M_COLS);\r\n  }\r\n\r\n  createNode(row, col) {\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      previousNode: null,\r\n      isWall: false,\r\n    };\r\n  }\r\n\r\n  createBoard(MaxRows = 20, MaxCols = 50) {\r\n    const M_ROWS = MaxRows,\r\n      M_COLS = MaxCols;\r\n\r\n    for (let row = 0; row < M_ROWS; row++) {\r\n      const Column = [];\r\n      const htmlColumn = [];\r\n      for (let col = 0; col < M_COLS; col++) {\r\n        let node = this.createNode(row, col);\r\n        Column.push(node);\r\n        htmlColumn.push(\r\n          <div\r\n            className=\"box\"\r\n            key={`r${row}-c${col}`}\r\n            id={`r${row}-c${col}`}\r\n          ></div>\r\n        );\r\n      }\r\n      this.BOARD_ARRAY.push(Column);\r\n      this.HTML_BOARD_ARRAY.push(htmlColumn);\r\n    }\r\n  }\r\n\r\n  resetBoard() {\r\n    this.createBoard();\r\n    this.HTML_BOARD_ARRAY.forEach((elem) => {\r\n      elem.forEach(col => {\r\n        let htmlCur = document.querySelector(`#${col.key}`);\r\n        htmlCur.classList = ['box']\r\n      })\r\n    });\r\n  }\r\n  getNeighbourNode(node, direction, vertical = false) {\r\n    try {\r\n      let Node;\r\n      if (!vertical) {\r\n        Node = this.BOARD_ARRAY[node.row + direction][node.col];\r\n      } else {\r\n        Node = this.BOARD_ARRAY[node.row][node.col + direction];\r\n      }\r\n\r\n      return Node;\r\n    } catch (e) {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getNeighbours(node) {\r\n    let neighbours = [];\r\n    let directions = [1, -1, \"U\", \"D\"];\r\n    for (let direction in directions) {\r\n      let neighbour;\r\n      switch (directions[direction]) {\r\n        case 1:\r\n          neighbour = this.getNeighbourNode(node, +1);\r\n          neighbours.push(neighbour);\r\n          break;\r\n\r\n        case -1:\r\n          neighbour = this.getNeighbourNode(node, -1);\r\n          neighbours.push(neighbour);\r\n          break;\r\n\r\n        case \"U\":\r\n          neighbour = this.getNeighbourNode(node, -1, true);\r\n          neighbours.push(neighbour);\r\n          break;\r\n\r\n        case \"D\":\r\n          neighbour = this.getNeighbourNode(node, 1, true);\r\n          neighbours.push(neighbour);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return neighbours;\r\n  }\r\n\r\n  highlightNeighbours(node) {\r\n    let neighbours = this.getNeighbours(node);\r\n    for (let i = 0; i < 4; i++) {\r\n      let curr = neighbours[i];\r\n      if (curr === \"\" || typeof curr === \"undefined\") {\r\n        continue;\r\n      } else {\r\n        let row = curr.row;\r\n        let col = curr.col;\r\n        let node = document.getElementById(`r${row}-c${col}`);\r\n        node.classList.add(\"highlight\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // came from\r\n\r\n  // makeQueue() {\r\n  //   return {\r\n  //     list: [],\r\n  //     get: () => {\r\n  //       return this.list.pop()\r\n  //     },\r\n  //     put: (item) => {\r\n  //       this.list.unshift(item)\r\n  //     },\r\n  //     empty: () => {\r\n  //       return this.list.length === 0\r\n  //     }\r\n  //   }\r\n  // }\r\n  delay = (ms) => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  };\r\n\r\n  getPath(node) {\r\n    return null;\r\n  }\r\n\r\n  breadthFirstSearch(startNode, endNode, id = false) {\r\n    let node;\r\n    let row;\r\n    let col;\r\n    if (id) {\r\n      node = startNode.split(\"-\");\r\n      row = node[0].substring(1);\r\n      col = node[1].substring(1);\r\n      node = this.BOARD_ARRAY[row][col];\r\n    }\r\n    node = startNode;\r\n    let htmlCur = document.querySelector(`#r${node.row}-c${node.col}`);\r\n    htmlCur.classList.add('start')\r\n\r\n\r\n    this.frontier = []; // queue to keep track of this.frontier nodes\r\n    this.visited = []; // list to keep track of this.visited Nodes\r\n    this.cameFrom = {}; //\r\n    let found = false\r\n    this.frontier.push(node);\r\n    this.cameFrom[node] = null;\r\n\r\n    while (this.frontier.length !== 0 && found === false) {\r\n      let current = this.frontier.shift();\r\n      let neighbours = this.getNeighbours(current);\r\n      // eslint-disable-next-line no-loop-func\r\n      neighbours.forEach((newNode) => {\r\n        setTimeout(() => this.highlightNeighbours(current), 59)\r\n        if (current.row === endNode.row && current.col === endNode.col) {\r\n          let htmlCur = document.querySelector(\r\n            `#r${current.row}-c${current.col}`\r\n          );\r\n          setTimeout(() => htmlCur.classList.add(\"active\"), 100);\r\n          this.findReturnPath(startNode, current)\r\n          found = true\r\n          return null\r\n        }\r\n        if (newNode === \"\" || typeof newNode === \"undefined\") {\r\n          return;\r\n        }\r\n        if (!this.visited.includes(newNode)) {\r\n          this.frontier.push(newNode);\r\n          this.visited.push(newNode);\r\n          this.cameFrom[newNode] = current;\r\n          newNode.previousNode = current;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  findReturnPath(startNode, currentNode) {\r\n    const path = [];\r\n    let current = currentNode;\r\n    let row,\r\n      col = [current.row, current.col];\r\n    while (current !== startNode) {\r\n      current = current.previousNode;\r\n      row = current.row;\r\n      col = current.col;\r\n\r\n      if (current === startNode) {\r\n        break\r\n      }\r\n      let htmlCur = document.querySelector(`#r${row}-c${col}`);\r\n      setTimeout(() => htmlCur.classList.add('nodePath'), 200)\r\n      path.push(current);\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport Board from \"./Board\";\nimport PathFinder from \"./PathFinder\";\n\nfunction App() {\n  const [update, setupdate] = useState({ counter: 0 });\n  const min = 20;\n  const max = 50;\n  let path = new PathFinder(min, max);\n  const [startNode, setStartNode] = useState(path.createNode(0, 10));\n  const [endNode, setEndNode] = useState(path.createNode(1, 30));\n\n  const handleReset = () => {\n    path.resetBoard();\n    setStartNode(path.createNode(0, 10));\n    setEndNode(path.createNode(1, 30));\n    return setupdate({\n      counter: update.counter + 1,\n    });\n  };\n  useEffect(() => {\n    function reset() {\n      path.HTML_BOARD_ARRAY.forEach((elem) => {\n        elem.forEach((col) => {\n          let htmlCur = document.querySelector(`#${col.key}`);\n          htmlCur.classList = [\"box\"];\n        });\n      });\n    }\n    setTimeout(() => {\n      reset();\n      document\n        .getElementById(`r${startNode.row}-c${startNode.col}`)\n        .classList.add(\"start\");\n      document\n        .getElementById(`r${endNode.row}-c${endNode.col}`)\n        .classList.add(\"active\");\n    }, 100);\n  }, [startNode, endNode, path.HTML_BOARD_ARRAY]);\n  const mockTest = () => {\n    path.breadthFirstSearch(startNode, endNode);\n  };\n\n  const handleInput = (node) => {\n    if (node === \"start\") {\n      setTimeout(() => {\n        document.addEventListener(\"click\", function handler(e) {\n          const start = e.path[0];\n          let [row, col] = start.id.split(\"-\");\n          if (start.id.split(\"-\").length === 2) {\n            start.classList.add(\"start\");\n            row = parseInt(row.substring(1));\n            col = parseInt(col.substring(1));\n            setStartNode(path.createNode(row, col));\n          }\n\n          document.removeEventListener(\"click\", handler);\n        });\n      }, 10);\n    } else {\n      setTimeout(() => {\n        document.addEventListener(\"click\", function handler(e) {\n          const end = e.path[0];\n          let [row, col] = end.id.split(\"-\");\n          if (end.id.split(\"-\").length === 2) {\n            end.classList.add(\"active\");\n            row = parseInt(row.substring(1));\n            col = parseInt(col.substring(1));\n            setEndNode(path.createNode(row, col));\n          }\n\n          document.removeEventListener(\"click\", handler);\n        });\n      }, 10);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1>Path Finder</h1>\n        <button id=\"start\" onClick={mockTest}>\n          Start\n        </button>\n        <button id=\"end\" onClick={handleReset}>\n          Reset\n        </button>\n\n        <div className=\"startEnd\">\n          <button className=\"nodeInput\" onClick={() => handleInput(\"start\")}>\n            Set Start Node\n          </button>\n          <button className=\"nodeInput\" onClick={() => handleInput(\"end\")}>\n            Set End Node\n          </button>\n        </div>\n      </header>\n      <Board mock={mockTest} HTML_BOARD_ARRAY={path.HTML_BOARD_ARRAY} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/App.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}